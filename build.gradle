plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'edu.wpi.first.GradleRIO' version '2022.4.1'
    id 'com.google.protobuf' version '0.8.19'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def protobufVersion = '3.21.6'

def ROBOT_MAIN_CLASS = "com.team766.hal.wpilib.RobotMain"

sourceSets {
  main {
    java {
      // NOTE(rcahoon, 2022-10-16): Gradle doesn't need this, but VSCode seems
      // to not automatically add generated classes to the classpath.
      srcDirs 'build/generated/source/proto/main/java'
    }
  }
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }

                // Just the (static) config files
                configFiles(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy/configs')
                    directory = '/home/lvuser/deploy/configs'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'

    // our files
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

    implementation files('deps/commons-math3-3.6.1.jar')
    implementation files('deps/gral-core-0.11.jar')
    // implementation "org.java-websocket:Java-WebSocket:1.4.0"
    //implementation files('deps/Java-WebSocket-1.3.9.jar')
    implementation files('deps/json-20190722.jar')
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

allprojects {
    group 'com.team766'
    version '2.1.0'

    repositories {
        mavenCentral()

        gradlePluginPortal()  // for protobuf

        maven { url = uri('https://frcmaven.wpi.edu/artifactory/release/') }

        // CTRE
        maven { url = uri('https://devsite.ctr-electronics.com/maven/release/') }

        // REV
        maven { url = uri('https://maven.revrobotics.com/') }
    }
}

protobuf {
  // Configure the protoc executable
  protoc {
    // Download from repositories
    artifact = "com.google.protobuf:protoc:${protobufVersion}"
  }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Team766/MaroonFramework")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId "maroonframework"
            from(components.java)
        }
    }
}

